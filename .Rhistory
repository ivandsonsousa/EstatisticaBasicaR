title = "Modelo linear com intercepto nulo"
) +
theme(text = element_text(size = 16))
dados %>%
ggplot(aes(x = x, y = y, dados)) +
geom_point(size = 2, col = "orange") +
geom_smooth(formula = y ~ x, col = "black") +
labs(
title = "Modelo linear com intercepto nulo"
) +
theme(text = element_text(size = 16))
dados %>%
ggplot(aes(x = x, y = y, dados)) +
geom_point(size = 2, col = "orange") +
geom_smooth(formula = y ~ x - 1, col = "black") +
labs(
title = "Modelo linear com intercepto nulo"
) +
theme(text = element_text(size = 16))
dados %>%
ggplot(aes(x = x, y = y, dados)) +
geom_point(size = 2, col = "orange") +
geom_smooth(formula = y ~ x - 1, col = "black", method = "lm") +
labs(
title = "Modelo linear com intercepto nulo"
) +
theme(text = element_text(size = 16))
par(mfrow = c(2,2))
plot(modelo, which = c(1:4), pch = 16)
dados = data.frame(
x = c(119, 155, 174, 190, 196, 233, 272, 253, 276),
y = c(112, 152, 172, 183, 192, 228, 263, 239, 263)
)
modelo = lm(formula = y ~ x - 1, dados)
modelo
anova(modelo)
confint(modelo)
dados %>%
ggplot(aes(x = x, y = y, dados)) +
geom_point(size = 2, col = "orange") +
geom_smooth(formula = y ~ x - 1, col = "black", method = "lm") +
labs(
title = "Modelo linear com intercepto nulo"
) +
theme(text = element_text(size = 16))
par(mfrow = c(2,2))
plot(modelo, which = c(1:4), pch = 16)
?lm()
q()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(readxl)
library(combinat)
library(kableExtra)
dados = data.frame(
tempo = c(10.8, 14.4, 19.6, 18, 8.4, 15.2, 11, 13.3, 23.1),
volume = c(20.39, 24.92, 34.84, 31.72, 13.59, 30.87, 17.84, 23.22, 39.65)
)
?confint()
?predict()
dados %>%
lm(formula = tempo ~ volume) %>%
predict(newdata = data.frame(volume = 30), interval = "predict")
dados %>%
lm(formula = tempo ~ volume) %>%
predict(newdata = data.frame(volume = 30), interval = "confidence")
dados = data.frame(
meses = c(1:10),
erros = c(30, 28, 24, 20, 18, 14, 13, 10, 7, 6)
)
dados %>%
ggplot(aes(x = meses, y = erros)) +
geom_point(size = 2, col = "orange") +
stat_smooth(formula = y ~ x, method = "lm")
dados %>%
ggplot(aes(x = meses, y = erros)) +
geom_point(size = 2, col = "orange") +
stat_smooth(formula = y ~ x, method = "lm") +
labs(
title = "Reta de regressão linear ajustada",
subtitle = "Método de MQO"
) +
theme(text = element_text(size = 16))
lm(formula = tempo ~ volume)
lm(formula = tempo ~ volume, dados)
lm(formula = erros ~ meses, dados)
View(dados)
cat(
"(xbar, ybar) =",
[mean(dados$meses), mean(dados$erros)]
cat(
"(xbar, ybar) =",
"[",
mean(dados$meses), mean(dados$erros),
"]"
)
modelo = lm(formula = erros ~ meses, dados)
modelo = lm(formula = erros ~ meses, dados)
modelo$fitted.values
dados %>%
ggplot(aes(x = meses, y = erros)) +
geom_point(size = 2, col = "orange") +
stat_smooth(formula = y ~ x, method = "lm") +
geom_vline(xintercept = mean(dados$meses)) +
geom_hline(yintercept = mean(dados$erros)) +
labs(
title = "Reta de regressão linear ajustada",
subtitle = "Método de MQO"
) +
theme(text = element_text(size = 16))
dados %>%
ggplot(aes(x = meses, y = erros)) +
geom_point(size = 2, col = "orange") +
stat_smooth(formula = y ~ x, method = "lm") +
geom_vline(xintercept = mean(dados$meses), col = "lightgray") +
geom_hline(yintercept = mean(dados$erros), col = "lightgray") +
labs(
title = "Reta de regressão linear ajustada",
subtitle = "Método de MQO"
) +
theme(text = element_text(size = 16))
dados %>%
ggplot(aes(x = meses, y = erros)) +
geom_point(size = 2, col = "orange") +
stat_smooth(formula = y ~ x, method = "lm") +
geom_vline(xintercept = mean(dados$meses), col = "darkgray") +
geom_hline(yintercept = mean(dados$erros), col = "darkgray") +
labs(
title = "Reta de regressão linear ajustada",
subtitle = "Método de MQO"
) +
theme(text = element_text(size = 16))
dados %>%
ggplot(aes(x = meses, y = erros)) +
geom_point(size = 2, col = "orange") +
stat_smooth(formula = y ~ x, method = "lm") +
geom_vline(xintercept = mean(dados$meses), col = "white") +
geom_hline(yintercept = mean(dados$erros), col = "white") +
labs(
title = "Reta de regressão linear ajustada",
subtitle = "Método de MQO"
) +
theme(text = element_text(size = 16))
dados %>%
ggplot(aes(x = meses, y = erros)) +
geom_point(size = 2, col = "orange") +
stat_smooth(formula = y ~ x, method = "lm") +
geom_vline(xintercept = mean(dados$meses), col = "red") +
geom_hline(yintercept = mean(dados$erros), col = "red") +
labs(
title = "Reta de regressão linear ajustada",
subtitle = "Método de MQO"
) +
theme(text = element_text(size = 16))
dados %>%
ggplot(aes(x = meses, y = erros)) +
geom_point(size = 2, col = "orange") +
stat_smooth(formula = y ~ x, method = "lm") +
geom_vline(xintercept = mean(dados$meses), col = "lightred") +
geom_hline(yintercept = mean(dados$erros), col = "red") +
labs(
title = "Reta de regressão linear ajustada",
subtitle = "Método de MQO"
) +
theme(text = element_text(size = 16))
dados %>%
ggplot(aes(x = meses, y = erros)) +
geom_point(size = 2, col = "orange") +
stat_smooth(formula = y ~ x, method = "lm") +
geom_vline(xintercept = mean(dados$meses), col = "lightblue") +
geom_hline(yintercept = mean(dados$erros), col = "red") +
labs(
title = "Reta de regressão linear ajustada",
subtitle = "Método de MQO"
) +
theme(text = element_text(size = 16))
dados %>%
ggplot(aes(x = meses, y = erros)) +
geom_point(size = 2, col = "orange") +
stat_smooth(formula = y ~ x, method = "lm") +
geom_vline(xintercept = mean(dados$meses), col = "lightblue") +
geom_hline(yintercept = mean(dados$erros), col = "lightblue") +
labs(
title = "Reta de regressão linear ajustada",
subtitle = "Método de MQO"
) +
theme(text = element_text(size = 16))
dados %>%
ggplot(aes(x = meses, y = erros)) +
geom_point(size = 2, col = "orange") +
stat_smooth(formula = y ~ x, method = "lm") +
geom_vline(xintercept = mean(dados$meses), col = "lightblue") +
geom_hline(yintercept = mean(dados$erros), col = "lightblue") +
labs(
title = "Reta de regressão linear ajustada",
subtitle = "Método de MQO"
) +
theme_classic()
theme(text = element_text(size = 16))
dados %>%
ggplot(aes(x = meses, y = erros)) +
geom_point(size = 2, col = "orange") +
stat_smooth(formula = y ~ x, method = "lm") +
geom_vline(xintercept = mean(dados$meses), col = "lightblue") +
geom_hline(yintercept = mean(dados$erros), col = "lightblue") +
labs(
title = "Reta de regressão linear ajustada",
subtitle = "Método de MQO"
) +
theme_minimal() +
theme(text = element_text(size = 16))
dados %>%
ggplot(aes(x = meses, y = erros)) +
geom_point(size = 2, col = "orange") +
stat_smooth(formula = y ~ x, method = "lm") +
geom_vline(xintercept = mean(dados$meses), col = "lightblue") +
geom_hline(yintercept = mean(dados$erros), col = "lightblue") +
labs(
title = "Reta de regressão linear ajustada",
subtitle = "Método de MQO"
) +
theme_classic() +
theme(text = element_text(size = 16))
dados %>%
ggplot(aes(x = meses, y = erros)) +
geom_point(size = 2, col = "orange") +
stat_smooth(formula = y ~ x, method = "lm") +
geom_vline(xintercept = mean(dados$meses), col = "lightgray") +
geom_hline(yintercept = mean(dados$erros), col = "lightblue") +
labs(
title = "Reta de regressão linear ajustada",
subtitle = "Método de MQO"
) +
theme_classic() +
theme(text = element_text(size = 16))
dados %>%
ggplot(aes(x = meses, y = erros)) +
geom_point(size = 2, col = "orange") +
stat_smooth(formula = y ~ x, method = "lm") +
geom_vline(xintercept = mean(dados$meses), col = "lightgray") +
geom_hline(yintercept = mean(dados$erros), col = "lightgray") +
labs(
title = "Reta de regressão linear ajustada",
subtitle = "Método de MQO"
) +
theme_classic() +
theme(text = element_text(size = 16))
dados %>%
ggplot(aes(x = meses, y = erros)) +
geom_point(size = 2, col = "orange") +
stat_smooth(formula = y ~ x, method = "lm") +
geom_vline(xintercept = mean(dados$meses), col = "red") +
geom_hline(yintercept = mean(dados$erros), col = "lightgray") +
labs(
title = "Reta de regressão linear ajustada",
subtitle = "Método de MQO"
) +
theme_classic() +
theme(text = element_text(size = 16))
dados %>%
ggplot(aes(x = meses, y = erros)) +
geom_point(size = 2, col = "orange") +
stat_smooth(formula = y ~ x, method = "lm") +
geom_vline(xintercept = mean(dados$meses), col = "red") +
geom_hline(yintercept = mean(dados$erros), col = "red") +
labs(
title = "Reta de regressão linear ajustada",
subtitle = "Método de MQO"
) +
theme_classic() +
theme(text = element_text(size = 16))
dados %>%
ggplot(aes(x = meses, y = erros)) +
geom_point(size = 2, col = "orange") +
stat_smooth(formula = y ~ x, method = "lm") +
labs(
title = "Reta de regressão linear ajustada",
subtitle = "Método de MQO"
) +
theme(text = element_text(size = 16))
dados %>%
lm(formula = erros ~ meses) %>%
predict(newdata = data.frame(meses = 5), interval = "confidence", level = 0.95)
dados = data.frame(
renda = c(3, 5, 10, 20, 30, 50, 70, 100, 150, 200),
gasto = c(1.5, 2, 6, 10, 15, 20, 25, 40, 60, 80)
)
modelo = lm(formula = gasto ~ renda, dados)
modelo
q()
knitr::opts_chunk$set(echo = TRUE)
modelo %>%
predict(alternative = "confidence")
library(dplyr)
library(ggplot2)
library(readxl)
library(combinat)
library(kableExtra)
modelo %>%
predict(alternative = "confidence")
dados = data.frame(
renda = c(3, 5, 10, 20, 30, 50, 70, 100, 150, 200),
gasto = c(1.5, 2, 6, 10, 15, 20, 25, 40, 60, 80)
)
modelo = lm(formula = gasto ~ renda, dados)
modelo
modelo %>%
predict(alternative = "confidence")
modelo$fitted.values
modelo %>%
predict(newdata = data.frame(renda = 170), alternative = "confidence")
modelo %>%
predict(newdata = data.frame(renda = 170), interval = "confidence")
modelo %>%
predict( interval = "confidence")
modelo$fitted.values
modelo %>%
predict(newdata = data.frame(renda = 170), interval = "confidence")
modelo %>%
predict(newdata = data.frame(renda = 1000), interval = "confidence")
predict(modelo, interval = "confidence")
1766/11
557/12,09
557/12.09
qt(0.055, 10)
49+c(-1,1)*qt(p=(0.025, 0.975), 10)
49+c(-1,1)*qt(p=c(0.025, 0.975), 10)
qt(0.055/2, 10)
49+c(-1,1)*qt(0.975, 10)*22
0.3+c(-1,1)*qt(0.975, 10)*0.07
49+c(-1,1)*qt(0.975, 10)*22
qt(0.975,10)
qt(0.055/2,10)
qt(0.003/2,10)
qt(0.055/2,10, lower.tail = F)
qt(0.003/2,10, lower.tail = F)
pt(2.1718, 10, lower.tail = F)
pt(2.1718, 10, lower.tail = F)*2
dados = data.frame(
X = c(0.5, 0.5, 1, 1, 1, 4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 5.5, 6, 6),
Y = c(163, 182, 978, 466, 549, 495, 723, 681, 619, 1049, 1033, 890, 1522, 1194, 987, 764, 1373)
)
dados %>%
modelo = lm(formula = Y ~ X)
dados %>%
modelo = lm(formula = Y ~ X)
modelo = lm(formula = Y ~ X, dados)
modelo = lm(formula = Y ~ X, dados)
modelo
anova(modelo)
summary(modelo)
tabela = anova(modelo)
tabela
View(tabela)
rsq = tabela$`Sum Sq`[1]/sum(tabela$`Sum Sq`)
rsq = tabela$`Sum Sq`[1]/sum(tabela$`Sum Sq`)
rsq
summary(modelo)
modelo %>%
predict(newdata = data.frame(X = 5), interval = "confidence")
modelo %>%
predict(newdata = data.frame(X = 5), interval = "confidence", level = 0.90)
modelo$coefficients[2]
typeof(modelo$coefficients[2])
mode(modelo$coefficients[2])
typeof(dados)
mode(dados)
View(dados)
typeof(dados)
class(dados)
class(modelo$coefficients[2])
t = (modelo$coefficients[2] - 300)*sqrt(sum((dados$X - mean(dados$X))^2))
beta_hat = as.double(modelo$coefficients[2])
t = (beta_hat - 300)*sqrt(sum((dados$X - mean(dados$X))^2))
beta_0 = as.double(modelo$coefficients[1])
t = (beta_0 - 300)*sqrt(sum((dados$X - mean(dados$X))^2))
q()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(readxl)
library(combinat)
library(kableExtra)
library(dplyr)
library(ggplot2)
library(readxl)
library(combinat)
library(kableExtra)
dados = data.frame(
X = c(0.5, 0.5, 1, 1, 1, 4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 5.5, 6, 6),
Y = c(163, 182, 978, 466, 549, 495, 723, 681, 619, 1049, 1033, 890, 1522, 1194, 987, 764, 1373)
)
modelo = lm(formula = Y ~ X, dados)
modelo
tabela = anova(modelo)
tabela
modelo$coefficients[1]
S_e = tabela$`Mean Sq`[2] #estimativa do desvio padrão dos resíduos
alpha_hat = as.double(modelo$coefficients[1]) #parâmetro alpha estimado
t_alpha = ((alpha_hat - 300)/S_e)*sqrt(n*sum((dados$X - mean(dados$X))^2)/sum(dados$X^2))
n = nrow(dados)
S_e = tabela$`Mean Sq`[2] #estimativa do desvio padrão dos resíduos
alpha_hat = as.double(modelo$coefficients[1]) #parâmetro alpha estimado
t_alpha = ((alpha_hat - 300)/S_e)*sqrt(n*sum((dados$X - mean(dados$X))^2)/sum(dados$X^2))
n = nrow(dados)
S_e = sqrt(tabela$`Mean Sq`[2]) #estimativa do desvio padrão dos resíduos
alpha_hat = as.double(modelo$coefficients[1]) #parâmetro alpha estimado
t_alpha = ((alpha_hat - 300)/S_e)*sqrt(n*sum((dados$X - mean(dados$X))^2)/sum(dados$X^2))
pt(t_alpha, df = n-2, lower.tail = F)
15:21
dados = data.frame(
pais = 15:21,
filhos = c(15.4, 15.7, 16, 16.3, 16.6, 17, 17.3)
)
modelo = lm(formula = filhos ~ pais, dados)
modelo
dados = data.frame(
x = c(1, 3, 5, 10, 15, 1.1, 3, 7.3, 12, 18.7, 0.7, 1.4, 8.2, 13.1, 19.7),
y = c(1.8, 4.9, 6.2, 12.6, 17.4, 0.4, 4.4, 0, 13.2, 17.1, 0, 4.5, 0, 0, 0)
)
modelo = lm(formula = y ~ x, dados)
modelo
dados = data.frame(
x = c(1, 3, 5, 10, 15, 1.1, 3, 7.3, 12, 18.7, 0.7, 1.4, 8.2, 13.1, 19.7),
y = c(1.8, 4.9, 6.2, 12.6, 17.4, 0.4, 4.4, 4.4, 13.2, 17.1, 17.1, 4.5, 4.5, 4.5, 4.5)
)
modelo = lm(formula = y ~ x, dados)
modelo
rep(1, 5)
dados = data.frame(
x = c(rep(1, 4), rep(3, 5), rep(5, 3), rep(10, 4), rep(15, 4)),
y = c(1.1, 0.7, 1.8, 0.4,
3, 1.4, 4.9, 4.4, 4.5,
7.3, 8.2, 6.2,
12, 13.1, 12.6, 13.2,
18.7, 19.7, 17.4, 17.1)
)
View(dados)
modelo = lm(formula = y ~ x, dados)
modelo
dados = data.frame(
X = c(rep(1, 4), rep(3, 5), rep(5, 3), rep(10, 4), rep(15, 4)),
Y = c(1.1, 0.7, 1.8, 0.4,
3, 1.4, 4.9, 4.4, 4.5,
7.3, 8.2, 6.2,
12, 13.1, 12.6, 13.2,
18.7, 19.7, 17.4, 17.1)
)
modelo = lm(formula = Y ~ X, dados)
modelo
tabela = anova(modelo)
n = nrow(dados)
S_e = sqrt(tabela$`Mean Sq`[2]) #estimativa do desvio padrão dos resíduos
beta_hat = as.double(modelo$coefficients[2]) #parâmetro beta estimado
t_beta = ((beta_hat - 1)/S_e)*sqrt(n*sum((dados$X - mean(dados$X))^2))
tabela = anova(modelo)
n = nrow(dados)
S_e = sqrt(tabela$`Mean Sq`[2]) #estimativa do desvio padrão dos resíduos
beta_hat = as.double(modelo$coefficients[2]) #parâmetro beta estimado
t_beta = ((beta_hat - 1)/S_e)*sqrt(n*sum((dados$X - mean(dados$X))^2))
tabela
sqrt(1.16)
tabela = anova(modelo)
n = nrow(dados)
S_e = sqrt(tabela$`Mean Sq`[2]) #estimativa do desvio padrão dos resíduos
beta_hat = as.double(modelo$coefficients[2]) #parâmetro beta estimado
t_beta = ((beta_hat - 1)/S_e)*sqrt(sum((dados$X - mean(dados$X))^2))
pt(t_beta, df = n-2, lower.tail = F)
x = 0:100
y = x^2
plot(x, y)
x = 0:100
y = log10(x)
plot(x, y)
x = 0:100
y = sin(x)
plot(x, y)
x = 0:2*Pi
pi
x = 0:2*pi
y = sin(x)
plot(x, y)
x = 0:pi
y = sin(x)
plot(x, y)
?seq()
x = seq(0, pi, by = 0.1)
y = sin(x)
plot(x, y)
x = seq(0, pi, by = 0.1)
y = sin(x)
plot(x, y, pch = 16)
x = seq(0, 2*pi, by = 0.1)
y = sin(x)
plot(x, y, pch = 16)
x = seq(0, pi, by = 0.1)
y = sin(x)
plot(x, y, pch = 16)
dados = data.frame(
Y = c(17, 21, 49, 54, 64, 48, 34, 63, 62, 72, 61, 91),
log_X = c(rep(0.36, 4), rep(0.56, 4), rep(0.76, 4))
)
View(dados)
modelo = lm(formula = Y ~ log_X, dados)
modelo
tabela = anova(modelo)
tabela
summary(modelo)
tabela$`Sum Sq`[1]/sum(tabela$`Sum Sq`)
setwd("~/GitHub/EstatisticaBasicaR")
q()
